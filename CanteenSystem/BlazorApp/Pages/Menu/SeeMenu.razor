@page "/SeeMenu"
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos
@inject IMenuService menuService

<div class="page">
    <div class="datepicker">
        <InputDate @bind-Value="pickedDate"></InputDate>
        @if (!doSeeMenu)
        {
            <button class="datebtn" @onclick="LoadMenu">See Menu</button>
        }
        else if (doSeeMenu)
        {
            <button class="hidebtn" @onclick="@(() => doSeeMenu = !doSeeMenu)">Hide Menu</button>
        }
        @if (!string.IsNullOrEmpty(msg))
        {
            <p class="error-message">@msg</p>
        }
    </div>


    @if (menu == null) {}

    else if (pickedDate < DateOnly.FromDateTime(DateTime.Today))
    {
        <span>Please input a valid date (today or in the future)</span>
    }

    else if (menu.Items == null || !menu.Items.Any())
    {
        
    }


    else if (doSeeMenu)
    {
        <h3>Menu for the day: @dateString</h3>
        <table>
            <tr>
                <th>Item</th>
                <th>Ingredients</th>
                <th>Allergens</th>
            </tr>

            @foreach (ItemMenuDto item in menu.Items)
            {
                <tr>
                    <td>
                        <p class="item-name">@item.Name</p>
                    </td>
                    <td>@item.IngredientNames</td>
                    <td>@item.Allergens</td>
                </tr>
            }
        </table>
    }
</div>


@code {
    private string msg = "";
    private MenuBasicDto menu;
    private DateOnly pickedDate;
    private string ingredients = "";
    private string allergens = "";
    private string dateString = "";
    private bool doSeeMenu = false;


    /// Method that shows a datepicker and loads today's menu when the page is loaded
    /// 
    protected override async Task OnInitializedAsync()
    {
        pickedDate = DateOnly.FromDateTime(DateTime.Today);

        msg = "";
        try
        {
            menu = await menuService.GetMenuByDateAsync(pickedDate);
            ConvertDate(menu.Date);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            msg = e.Message;
        }
    }

    /// Retrieves Menu using MenuService and flips the boolean that decides
    /// The Menu visibility 
    /// 
    private async Task LoadMenu()
    {
        msg = "";
        try
        {
            menu = await menuService.GetMenuByDateAsync(pickedDate);
            ConvertDate(menu.Date);
            doSeeMenu = !doSeeMenu;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            msg = e.Message;
        }
    }

    /// Converts DateOnly format into a String that is displayed in the DatePicker
    /// 
    private void ConvertDate(DateOnly date)
    {
        if (date.Month < 10 && date.Day < 10)
            dateString = "0" + date.Day + "-0" + date.Month + "-" + date.Year;
        else if (date.Month >= 10 && date.Day < 10)
            dateString = "0" + date.Day + "-" + date.Month + "-" + date.Year;
        else if (date.Month < 10 && date.Day >= 10)
            dateString = date.Day + "-0" + date.Month + "-" + date.Year;
        else
            dateString = date.Day + "-" + date.Month + "-" + date.Year;
    }

}