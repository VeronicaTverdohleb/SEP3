@page "/ManageMenu"
@using HttpClients.ClientInterfaces
@using global::Shared.Dtos
@using global::Shared.Model
@inject IMenuService menuService
@inject IItemService itemService


<div class="page">
    <div class="datepicker">
        <InputDate @bind-Value="pickedDate"></InputDate>
        @if (!doSeeMenu)
        {
            <button class="datebtn" @onclick="LoadMenu">See Menu</button>
        }
        else if (doSeeMenu)
        {
            <button class="hidebtn" @onclick="HideMenu">Hide Menu</button>
        }
        @if (!string.IsNullOrEmpty(msg))
        {
            <p class="error-message">@msg</p>
        }
    </div>


    @if (doShowCreateButton)
    {
        <h6>Choose date and press Create Menu</h6>
        <button class="createmenubtn" @onclick="CreateMenu">Create Menu</button>
    }

    @if (pickedDate < DateOnly.FromDateTime(DateTime.Today))
    {
        <span>Please input a valid date (today or in the future)</span>
    }

    else if (doSeeMenu)
    {
        <h3>Menu for the day: @dateString</h3>
        <MenuList menu="@menu" doSeeMenuInMenuList="@doSeeMenuInMenuList"/>
    }

    <h5 class="error-message">@msgItem</h5>
    @if (seeAddItemButton)
    {
        @if (!seeItems)
        {
            <button class="additembtn" @onclick="SeeItemsToAdd">Add Item</button>
        }
        else if (seeItems)
        {
            <div class="dropdown">
                <label>Select Item to add: </label>
                <select class="select-item" name="addItem" id="addItem" @onchange="SetItemToAdd">
                    <option class="item-options" value="option1"></option>
                    @foreach (Item item in allItems)
                    {
                        <option class="item-options" value="@item.Id">@item.Name</option>
                    }
                </select>
                <button class="addtomenubtn" @onclick="AddItem">Add Item to Menu</button>
            </div>
        }
    }
</div>


@code {
    private string msg;
    private string msgItem;

    [Parameter]
    public MenuBasicDto menu { get; set; }

    [Parameter]
    public bool doSeeMenuInMenuList { get; set; }
    

    private DateOnly pickedDate;
    private string ingredients = "";
    private string allergens = "";
    private string dateString = "";
    private bool doSeeMenu = false;
    private bool doShowCreateButton = false;
    private bool seeItems = false;
    private bool seeAddItemButton = false;
    private ICollection<Item> allItems;
    private int itemToAddId;

    
    protected override async Task OnInitializedAsync()
    {
        doSeeMenu = false;
        allItems = (await itemService.GetAsync(null)).OrderByDescending(i => i.Name).ToList();

        pickedDate = DateOnly.FromDateTime(DateTime.Today);
    }


    // Loads menu with items and changes several booleans to either show/hide certain parts of the view
    private async Task LoadMenu()
    {
        msgItem = "";
        msg = "";
        try
        {
            menu = await menuService.GetMenuByDateAsync(pickedDate);
            doSeeMenu = true;
            seeAddItemButton = true;
            doShowCreateButton = false;
            seeItems = false;
            doSeeMenuInMenuList = true;
            ConvertDate(menu.Date);
        }
        catch (Exception e)
        {
            msg = e.Message;
            if (e.Message.Equals("There is no Menu on this date"))
            {
                doShowCreateButton = true;
                seeAddItemButton = false;
            }
            if (e.Message.Equals("There are no Items on this Menu"))
            {
                doSeeMenu = false;
                doShowCreateButton = false;
                seeAddItemButton = true;
                doSeeMenuInMenuList = false;
            }
        }
    }

    /// When Create Button is pressed, this method calls the Blazor Server to create a Menu
    /// 
    private async Task CreateMenu()
    {
        MenuBasicDto dto = new MenuBasicDto(new List<ItemMenuDto>(), pickedDate);
        msg = "";
        try
        {
            await menuService.CreateAsync(dto);
        }
        catch (Exception e)
        {
            msg = e.Message;
        }
        doShowCreateButton = !doShowCreateButton;
        msg = "The menu is currently empty";
        seeAddItemButton = true;
    }

    /// Converts DateOnly format into a String that is displayed in the DatePicker
    ///
    private void ConvertDate(DateOnly date)
    {
        if (date.Month < 10 && date.Day < 10)
            dateString = "0" + date.Day + "-0" + date.Month + "-" + date.Year;
        else if (date.Month >= 10 && date.Day < 10)
            dateString = "0" + date.Day + "-" + date.Month + "-" + date.Year;
        else if (date.Month < 10 && date.Day >= 10)
            dateString = date.Day + "-0" + date.Month + "-" + date.Year;
        else
            dateString = date.Day + "-" + date.Month + "-" + date.Year;
    }

    /// Whenever the Option in Drop down menu changes, it calls this method and sets the itemToAddId
    /// to the chosen Item
    ///
    private void SetItemToAdd(ChangeEventArgs e)
    {
        if (e.Value.ToString().Equals("option1"))
            msgItem = "Please choose an Item to add";
        else
            itemToAddId = int.Parse(e.Value.ToString());
    }

    /// Whenever User presses a button to add an Item to the Menu, it calls the MenuService
    /// And Updates the Menu (either deletes or adds the item)
    ///
    private async Task AddItem()
    {
        msgItem = "";
        Console.WriteLine(itemToAddId);
        if (itemToAddId == 0)
        {
            msgItem = "Please choose an Item to add";
            return;
        }
        try
        {
            MenuUpdateDto dto = new MenuUpdateDto(pickedDate, itemToAddId, "add");
            await menuService.UpdateMenuAsync(dto);
            await LoadMenu();
        }
        catch (Exception e)
        {
            msgItem = "This Item is already on the Menu";
        }
        seeItems = false;
    }
    
    /// Sets boolean doSeeMenu to false which hides the Menu from the main page and
    /// Shows a button with Add Item 
    private void HideMenu()
    {
        msgItem = "";
        doSeeMenu = false;
        seeAddItemButton = false;
    }

    /// Sets boolean doSeeMenuInMenuList to false which hides the Menu in the MenuList Component
    /// as well as the Items to Add icons
    /// 
    private void SeeItemsToAdd()
    {
        doSeeMenuInMenuList = false;
        seeItems = true;
    }

}