@page "/OrderItem"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using global::Shared.Dtos
@using System.Security.Claims
@inject IItemService itemService;
@inject IOrderService orderService;
@inject IJSRuntime jsRuntime;


<h3>Make Order</h3>
@if (items == null)
{
}
else if (!items.Any())
{
    <p>No to display</p>
}
else
{
    <label>Choose which date you would like to pick up your order:</label>
    <div class="datepicker">
        <InputDate @bind-Value="date"></InputDate>

    </div>
    if (date < DateOnly.FromDateTime(DateTime.Today))
    {
        <label style="color: red">Please input a valid date (today or in the future)</label>
    }
    if ((date == DateOnly.FromDateTime(DateTime.Today)) && (DateTime.Now.ToLocalTime().Hour>=12.00))
    {
        <label style="color: red">You cannot place an order at this date after 12.00 PM </label>
    }
    <br/>
    <div>
        <label>Choose which items you would like to add to your order:</label>
        <select name="addItem" id="addItem" @onchange="SetItemsToAddToOrder">
            <option>Choose:</option>
            @foreach (Item item in items)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>

        <button class="addItemToOrderBtn" @onclick="AddItem">Add to order</button>
    </div>
    <br/>
    <br/>
    <h5>Selected Items</h5>

    @if (_itemsAdded.Count > 0)
    {
        <table class="table">
            <thead>
            <tr>
                <th>Item Name</th>
                <th>Item Price</th>
                <th>Remove</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var i in items)
            {
                foreach (var j in _itemsAdded)
                {
                    if (i.Id == j.Id)
                    {
                        <tr>
                            <td>@i.Name</td>
                            <td>@i.Price</td>
                            <td>
                                <img src="img/delete.png" class="funnel" @onclick="RemoveItem"/>

                            </td>
                        </tr>
                    }
                }
            }
            </tbody>
        </table>
    }
    <br/>
    <div class="form-group field">
        <label>TotalPrice:</label>

        <input type="text" @bind="price" readonly/>

    </div>
    <br/>

    <button @onclick="ConfirmAction" class="createOrder">Create Order</button>
    @if (!string.IsNullOrEmpty(msg))
        {
            <label class="message" >@msg</label>
        }
    
}


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Item> items = new List<Item>();
    private DateOnly date = DateOnly.FromDateTime(DateTime.Now);
    private int userId;
    private Item itemToAdd = new Item();
    private string msg = "";
    private string status = "ordered";
    private string error = "";
    private bool addBool;
    private bool isVisible = false;
    private double price = 0;
    private IEnumerable<Claim>? _userClaims;
    private List<Item> _itemsAdded = new List<Item>();
    

    ///Method which gets called when accessing the page 
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _userClaims = user.Claims;


        try
        {
            items = await itemService.GetAsync(null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
///Saves the items before creating the order
    private void SetItemsToAddToOrder(ChangeEventArgs e)
    {
        int selectedValue = int.Parse(e.Value.ToString());
        itemToAdd = items.FirstOrDefault(item => item.Id == selectedValue);
    }
///Adds the selected item 
    private async Task AddItem()
    {
        msg = "";
        try
        {
            if (!_itemsAdded.Contains(itemToAdd))
            {
                _itemsAdded.Add(itemToAdd);
                 price += itemToAdd.Price;
                 msg = "Item added";
            }
            else
            {
                msg = "Item already added";
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
///Removes the selected item
    private async Task RemoveItem()
    {
        msg = "";
        try
        {
            _itemsAdded.Remove(itemToAdd);

            price -= itemToAdd.Price;
            msg = "Item removed";
           
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
///Creates order with the list of ingredients
    private async Task CreateOrder()
    {
        foreach (Claim claim in _userClaims!)
        {
            if (claim.Type.Equals("Id"))
                userId = int.Parse(claim.Value);
        }

        msg = "";
        if (items == null)
        {
            msg = "You must select an ingredient!";
            return;
        }
        msg = "";
        try
        {
            List<int> ids = new List<int>();
            foreach (var item1 in _itemsAdded)
            {
                ids.Add(item1.Id);
            }

            MakeOrderDto dto = new MakeOrderDto(userId, date, status, ids);


            try
            {
                if ((date < DateOnly.FromDateTime(DateTime.Today))||(date == DateOnly.FromDateTime(DateTime.Today)) && ((DateTime.Now.ToLocalTime().Hour>=12.00)))
                {
                    msg = "You cannot place an order at this time ";
                    
                }
                else
                {
                     await orderService.CreateAsync(dto);
                    msg = "The order was placed";
                }
               
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = "Cannot make an order with no items!";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
     
    }
///Asks for confirmation before creating order
    private async Task ConfirmAction()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction", "Are you sure you want to place the order?" +
                                                                            " (Order pickup is available after 12.00AM of the chosen date)");

        if (confirmed)
        {
            await CreateOrder();
            await OnInitializedAsync();
        }
        else
        {
            await OnInitializedAsync();
        }
    }

}