@page "/EditOrder"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using System.Security.Claims
@inject IOrderService orderService
@inject NavigationManager navMgr;

<div class="head">
    <h3>Your Orders</h3>
</div>

@if (orders == null)
{
}
else if (!orders.Any())
{
    <p>No Orders to display</p>
}
else
{
    <table class="table">
        <thead>
        <th>ID</th>
        <th>Date</th>
        <th>Status</th>
        <th>Edit</th>
        </thead>
        <tbody>
        @foreach (var order in orders)
        {
            <tr>
                <td>@order.Id</td>
                <td>@order.Date</td>
                <td>@order.Status</td>
                <td><img src="icons/edit.gif" class="funnel" @onclick="(() => SeeOrder(order.Id))" alt="nav"/></td>
            </tr>
        }
        </tbody>
    </table>
}
@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims;
    private IEnumerable<Order>? orders;
    
    private bool doShowFilters = false;
    private string username;
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthState;
            var user = authState.User;
            
            userClaims = user.Claims;
            foreach (var claim in userClaims!)
            {
                if (claim.Type.Equals("Username"))
                    username = claim.Value;
            }
            
            orders = await orderService.getAllOrdersAsync(null,null,username,null);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void SeeOrder(int id)
    {
        navMgr.NavigateTo($"/ViewOrder/{id}");
    }
}