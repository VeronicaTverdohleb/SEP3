@page "/ViewOrders"
@using global::Shared.Model
@using System.Security.Claims
@using HttpClients.ClientInterfaces
@inject IOrderService orderService
@inject NavigationManager navMgr;
<h3>ViewOrders</h3>

<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Order Id:</label>
                <input type="text" @bind="idFilter"/>
            </div>
            <div class="filter">
                <label>Date of order:</label>
                <input type="date" @bind="dateFilter"/>
            </div>
            <div class="filter">
                <label>order status:</label>
                <select @bind="completedStatusFilter">
                    <option>filter by order status:</option>
                    <option value="ordered">ordered</option>
                    <option value="in progress">in progress</option>
                    <option value="ready for pickup">ready for pickup</option>
                </select>
            </div>
            <div class="filter">
                <label>Customer name:</label>
                <input type="text" @bind="customerNameFilter"/>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadOrders">Load orders</button>
</div>

@if (orders == null)
{
}
else if (!orders.Any())
{
    <p>No Orders to display</p>
}
else
{
    @foreach (var order in orders)
    {
        <div class="order">
            
            <a @onclick=@(() => SeeOrder(@order.Id))>
                <h3>Order number: @order.Id</h3>
                <h5>Ordered for: @order.Date.ToString()</h5>
                <h5>ordered by: @order.Customer.UserName</h5>
                <h5>current status: @order.Status</h5></a>
        </div>
            <br/>
        }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    
    private IEnumerable<Order>? orders;
    private string msg = "";
    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    private bool doShowFilters = true;
    private int? idFilter;
    private DateOnly? dateFilter;
    private string? customerNameFilter;
    private string? completedStatusFilter;
    
    ///Method that loads all the orders depending on which filters are set in the webpage
    private async Task LoadOrders()
    {
        try
        {
            orders = await orderService.getAllOrdersAsync(idFilter,dateFilter,customerNameFilter,completedStatusFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    ///Method that is called whenever an order is clicked. It gets the order by its Id
    /// and opens it in a new webpage
    private async void SeeOrder(int id)
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn)
            msg = $"Please login to see the orders";
        else 
            navMgr.NavigateTo($"/ManageOrders/{id}");
    }
}