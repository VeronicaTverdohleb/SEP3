@page "/ViewOrder/{id:int}"
@using global::Shared.Dtos
@using global::Shared.Model
@using HttpClients.ClientInterfaces
@inject IOrderService orderService
@inject IItemService itemService
@inject NavigationManager navMgr

@if (order == null)
    {
        <h3>Loading</h3>
        <br/>
        <span>fetching data...</span>
    }

else
{
    <div class="post-card">
        <h3>Order number: @Id</h3>
        <p>requested pickup date: @order.Date</p>
        <p>This order has the following items:</p>
        <br/>
        @foreach (var item in order.Items)
        {
            <li>@item.Name with price: @item.Price kr</li>
        }
    </div>
    <br/>
    <p class="legal">ordered by: @order.Customer.FirstName @order.Customer.LastName</p>
    <label>Status: @order.Status</label>
    <p>total price: @totalPrice kr</p>
    <div>
        <button @onclick="ConfirmButton">Cancel Order (irreversible)</button>
    </div>
    if (confirmBool)
    {
        {
            <div>
                <p>Are you sure you want to cancel the order?</p>
                <button @onclick="DeleteOrder">Yes</button>
                <button @onclick="ConfirmButton">No</button>
            </div>
        }
    }
    <label class="label">@msg</label>
@code {

    [Parameter]
    public int Id { get; set; }
    private DateTime date = DateTime.Now;

    private bool confirmBool;
    private bool addBool;
    private bool removeBool;
    private string status;
    private OrderFullInfoDto order;
    private OrderUpdateDto updateDto = null!;
    private ICollection<Item> allItems;
    private double totalPrice;
    private string msg = "";
    private string error = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            Console.WriteLine("about to fetch");
            order = await orderService.GetOrderByIdAsync(Id);
            var fetchedItems = await itemService.GetAsync(null);
            allItems = fetchedItems.OrderBy(i => i.Name).ToList();
            status = order.Status;
            totalPrice = UpdateTotalPrice();
            updateDto = new(Id, order.Items, order.Status)
            {
                Items = order.Items,
                Status = order.Status,
            };
            Console.WriteLine("fetched the order!");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private double UpdateTotalPrice()
    {
        double temp = 0;
        foreach (var item in order.Items)
        {
            Console.WriteLine(item.Name + item.Price);
            temp += item.Price;
        }
        return temp;
    }

    private void ConfirmButton()
    {
        addBool = false;
        removeBool = false;
        if (order.Date == DateOnly.FromDateTime(DateTime.Today) && DateTime.Now > DateTime.Today.AddHours(12.00))
        {
            msg = "You Cannot Cancel An Order After 12:00";
        }
        else
        {
            if (confirmBool)
            {
                confirmBool = false;
            }
            else
            {
                confirmBool = true;
            }
        }
    }

    private async Task DeleteOrder()
    {

        msg = "";
        try
        {
            await orderService.DeleteAsync(Id);
            navMgr.NavigateTo($"/EditOrder");

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}}