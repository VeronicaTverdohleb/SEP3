@page "/ManageStorage"
@using HttpClients.ClientInterfaces
@using global::Shared.Model
@using global::Shared.Dtos.IngredientDto
@inject IIngredientService IngredientService;
@inject IJSRuntime jsRuntime;
<div class="head">
    <h3>INGREDIENTS</h3>
</div>
@if (ingredients == null)
{
    <p></p>
}
else if (!ingredients.Any())
{
    <p>No Ingredients to display</p>
}
else
{
    <div class="allergen-table">
        <table class="allergen">
            <thead>
            <tr>
                <td class="tItem">1. Dairy</td>
                <td class="tItem">2. Eggs</td>
                <td class="tItem">3. Fish</td>
                <td class="tItem">4. Shell Fish</td>
                <td class="tItem">5. Tree Nuts</td>
                <td class="tItem">6. Peanuts</td>
                <td class="tItem">7. Wheat</td>
                <td class="tItem">8. Soybeans</td>
                <td class="tItem">9. Sesame</td>
            </tr>
            </thead>
        </table>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Amount</th>
            <th>Allergen</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in ingredients)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Amount</td>
                <td>@item.Allergen</td>
                <td>
                    <td>
                        <img src="img/delete.png" class="funnel" @onclick="(() => ConfirmAction(item.Id))" alt="delete"/>
                    </td>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<div class="icon-row">
    <div class="filter-bar">
        <h2>Add</h2>
        <div class="filters-container">
            <img src="icons/@(doShowFilters1 ? "clear_" : "")add.png" class="funnel" @onclick="@(() => doShowFilters1 = !doShowFilters1)" alt="Funnel"/>
            @if (doShowFilters1)
            {
                <div class="form-group field">
                    <label>Name:</label>
                    <input type="text" rows="1" cols="15" @bind="name"/>
                </div>
                <div class="form-group field">
                    <label>Amount:</label>
                    <input type="text" rows="1" cols="5" @bind="amount"/>
                </div>
                <div class="form-group field">
                    <label>Allergen:</label>
                    <input type="text" rows="1" cols="5" @bind="allergen"/>
                </div>
                <div class="button-row">
                    @if (!string.IsNullOrEmpty(msg))
                    {
                        <label style="color: red">@msg</label>
                    }
                    <button @onclick="CreateIngredient" class="acceptbtn">Create</button>
                </div>
            }
        </div>
    </div>
    <div class="filter-bar">
        <h2>Edit</h2>
        <div class="filters-container">
            <img src="icons/edit.gif" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
            @if (doShowFilters)
            {
                <div>
                    <label>Id:</label>
                    <input type="text" @bind="id"/>
                </div>
                <div>
                    <label>Amount:</label>
                    <input type="text" @bind="amount"/>
                </div>
                <div class="button-row">
                    <button @onclick="EditIngredient" class="acceptbtn">Create</button>
                </div>
            }
        </div>
    </div>
</div>


@code {
    private IEnumerable<Ingredient>? ingredients;

    private bool doShowFilters = false;
    private bool doShowFilters1 = false;
    private bool doShowFilters2 = false;
    private string msg = "";
    
    private string? name;
    private int id;
    private int amount;
    private int allergen;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ingredients = await IngredientService.getAllIngredientsAsync(name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private async Task DeleteIngredient(int id)
    {
        msg = "";
        try
        {
            await IngredientService.DeleteIngredient(id);
        
            var list = new List<Ingredient>(ingredients!);
            list.RemoveAll(i => i.Id == id);
            ingredients = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task EditIngredient()
    {
        msg = "";
        try
        {
            IngredientUpdateDto updateDto = new(id, amount);
            await IngredientService.UpdateIngredientAmount(updateDto);
            ingredients = await IngredientService.getAllIngredientsAsync(name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task CreateIngredient()
    {
        msg = "";
        try
        {
            IngredientCreationDto creationDto = new(name, amount, allergen);
            await IngredientService.CreateAsync(creationDto);
            ingredients = await IngredientService.getAllIngredientsAsync(name);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    private async Task ConfirmAction(int id)
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirmAction", "Are you sure you want to proceed?");
        
        if (confirmed)
        {
            try
            {
                await DeleteIngredient(id);
                await OnInitializedAsync();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                msg = e.Message;
            }
        }
        else
        {
            await OnInitializedAsync();
        }
    }
}